name: 'pytest-reporter'
author: Dmitry Marchuk
description: >-
  Check pytest coverage and fail if tests failed or file and/or total coverage below threshold.
branding:
  color: 'purple'
  icon: 'check-square'
inputs:
  requirements-file:
    description: 'Path to the requirements file if you use pip. ./requirements.txt by default'
    required: false
    default: './requirements.txt'
  pytest-root-dir:
    description: 'root directory to recursively search for .py files'
    required: false
    default: '.'
  pytest-tests-dir:
    description: 'directory with pytest tests. if left empty will identify test(s) dir by default'
    required: false
    default: './'
  cov-omit-list:
    description: 'list of directories and/or files to ignore'
    required: false
    default: ''
  cov-threshold-single:
    description: 'fail if any single file coverage is less than threshold'
    required: false
    default: 0
  cov-threshold-total:
    description: 'fail if the total coverage is less than threshold'
    required: false
    default: 0
  async-tests:
    description: 'Add support for async tests'
    required: false
    default: false
  poetry-version:
    description: 'Version of poetry. Latest if not specified.'
    required: false

outputs:
  output-table: # id of output
    description: 'pytest-cov markdown output table'
  cov-threshold-single-fail:
    description: 'boolean if any single file coverage less than cov-threshold-single'
  cov-threshold-total-fail:
    description: 'boolean if total coverage less than cov-threshold-total'
runs:
  using: "composite"
  steps:
    - id: copy-coverage-processor
      run: cp ${{ github.action_path }}/coverage_handler.py ./coverage_handler
      shell: bash
    - id: run-tests
      run: |
        ${{ github.action_path }}/entrypoint.sh \
        "${{ inputs.requirements-file }}" \
        "${{ inputs.pytest-root-dir }}" \
        "${{ inputs.pytest-tests-dir }}" \
        "${{ inputs.cov-omit-list }}" \
        ${{ inputs.cov-threshold-single }} \
        ${{ inputs.cov-threshold-total }} \
        ${{ inputs.async-tests }} \
        ${{ inputs.poetry-version }} \
      shell: bash
    - run: |
        echo "SHORT_SHA=`echo ${{github.event.after}} | cut -c1-7`" >> $GITHUB_ENV
        echo "PULL_NUMBER=`echo ${{ github.event.pull_request.number }}`" >> $GITHUB_ENV
        echo "COMMIT_URL=`echo https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/commits/${{ github.event.after }}`" >> $GITHUB_ENV
      shell: bash
    - name: Pull Request Comment
      uses: actions/github-script@v6
      env:
        COVERAGE_TABLE: "${{ steps.run-tests.outputs.output-table }}"
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Tests coverage table')
          })
          
          const output = `#### Tests coverage table for [${process.env.SHORT_SHA}](${process.env.COMMIT_URL}) commit.
          ${process.env.COVERAGE_TABLE}`;
          
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - id: check-threashold
      run: |
        if [ "${{ steps.run-tests.outputs.cov-threshold-single-fail }}" == "true" ]; then
          echo "cov single fail ${{ steps.run-tests.outputs.cov-threshold-single-fail }}";
          exit 1;
        elif [ "${{ steps.run-tests.outputs.cov-threshold-total-fail }}"  == "true" ]; then
          echo "cov single fail ${{ steps.run-tests.outputs.cov-threshold-total-fail }}";
          exit 1;
        fi
      shell: bash
